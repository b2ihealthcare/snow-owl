/*
 * Copyright 2019 B2i Healthcare Pte Ltd, http://b2i.sg
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.b2international.snowowl.snomed.cis.rest;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.b2international.snowowl.core.ApplicationContext;
import com.b2international.snowowl.core.events.util.Promise;
import com.b2international.snowowl.core.rest.AbstractRestService;
import com.b2international.snowowl.core.rest.RestApiError;
import com.b2international.snowowl.datastore.request.job.JobRequests;
import com.b2international.snowowl.snomed.cis.domain.SctId;
import com.b2international.snowowl.snomed.cis.domain.SctIds;
import com.b2international.snowowl.snomed.cis.rest.model.BulkJob;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/**
 * @since 6.18
 */
@Api(value = "Bulk Jobs", description = "Bulk Jobs", tags = {"Bulk Jobs"})
@RestController
@RequestMapping(value = "/bulk/jobs", produces = MediaType.APPLICATION_JSON_VALUE)
public class CisBulkJobService extends AbstractRestService {

	private static final Set<String> JOB_TYPES = ImmutableSet.of(
		"SnomedIdentifierGenerateRequest",
		"SnomedIdentifierReserveRequest",
		"SnomedIdentifierRegisterRequest",
		"SnomedIdentifierDeprecateRequest",
		"SnomedIdentifierPublishRequest",
		"SnomedIdentifierReleaseRequest"
	);
	
	@Autowired
	@Value("${repositoryId}")
	private String repositoryId;
	
	@ApiOperation(value = "Returns all jobs.")
	@ApiResponses({
		@ApiResponse(code = 400, message = "Bad Request", response = RestApiError.class),
	})
	@GetMapping
	public Promise<List<BulkJob>> getBulkJobs(
			@ApiParam(value = "The security access token.", required = true)
			@RequestParam(value = "token")
			String token) {
		return JobRequests.prepareSearch()
				.all()
				.filterByParameter("type", JOB_TYPES)
				.buildAsync()
				.execute(getBus())
				.then(jobs -> jobs.stream().map(BulkJob::fromRemoteJob).collect(Collectors.toList()));
	}
	
	@ApiOperation(value = "Returns a job identified by the id.")
	@ApiResponses({
		@ApiResponse(code = 400, message = "Bad Request", response = RestApiError.class),
	})
	@GetMapping("/{jobId}")
	public Promise<BulkJob> getBulkJobById(
			@ApiParam(value = "The security access token.", required = true)
			@RequestParam(value = "token")
			String token,
			@ApiParam(value = "The jobId.", required = true)
			@PathVariable("jobId")
			String jobId) {
		return JobRequests.prepareGet(jobId)
				.buildAsync()
				.execute(getBus())
				.then(BulkJob::fromRemoteJob);
	}
	
	@ApiOperation(
		value = "Returns the records generated by the job.", 
		notes = "Returns the id records created or updated by a job identified by the id."
	)
	@ApiResponses({
		@ApiResponse(code = 400, message = "Bad Request", response = RestApiError.class),
	})
	@GetMapping("/{jobId}/records")
	public Promise<List<SctId>> getBulkJobRecords(
			@ApiParam(value = "The security access token.", required = true)
			@RequestParam(value = "token")
			String token,
			@ApiParam(value = "The jobId.", required = true)
			@PathVariable("jobId")
			String jobId) {
		return JobRequests.prepareGet(jobId)
				.buildAsync()
				.execute(getBus())
				.then(job -> {
					return job.getResultAs(ApplicationContext.getServiceForClass(ObjectMapper.class), SctIds.class).getItems();
				});
	}
	
	
	
}
